{"ast":null,"code":"var _jsxFileName = \"/Users/kundie/Projects/project3/taot-website/src/components/slideshow/Slider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { css, jsx } from '@emotion/react';\nimport SliderContent from './SliderContent';\nimport Slide from './Slide';\nimport Arrow from './Arrow';\nimport Dots from './Dots';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getWidth = () => window.innerWidth;\n/**\n * @function Slider\n */\n\n\nconst Slider = props => {\n  _s();\n\n  const {\n    slides\n  } = props;\n  const firstSlide = slides[0];\n  const secondSlide = slides[1];\n  const lastSlide = slides[slides.length - 1];\n  const [state, setState] = useState({\n    activeSlide: 0,\n    translate: getWidth(),\n    transition: 0.45,\n    transitioning: false,\n    _slides: [lastSlide, firstSlide, secondSlide]\n  });\n  const {\n    activeSlide,\n    translate,\n    _slides,\n    transition,\n    transitioning\n  } = state;\n  const autoPlayRef = useRef();\n  const transitionRef = useRef();\n  const resizeRef = useRef();\n  const sliderRef = useRef();\n  const throttleRef = useRef();\n  useEffect(() => {\n    autoPlayRef.current = nextSlide;\n    transitionRef.current = smoothTransition;\n    resizeRef.current = handleResize;\n    throttleRef.current = throttleArrows;\n  });\n  useEffect(() => {\n    const slider = sliderRef.current;\n\n    const smooth = e => {\n      if (e.target.className.includes('SliderContent')) {\n        transitionRef.current();\n      }\n    };\n\n    const resize = () => {\n      resizeRef.current();\n    };\n\n    const throttle = e => {\n      if (e.target.className.includes('SliderContent')) {\n        throttleRef.current();\n      }\n    };\n\n    const transitionStart = slider.addEventListener('transitionstart', throttle);\n    const transitionEnd = slider.addEventListener('transitionend', smooth);\n    const onResize = window.addEventListener('resize', resize);\n    return () => {\n      slider.removeEventListener('transitionend', transitionStart);\n      slider.removeEventListener('transitionend', transitionEnd);\n      window.removeEventListener('resize', onResize);\n    };\n  }, []);\n  useEffect(() => {\n    const play = () => {\n      autoPlayRef.current();\n    };\n\n    let interval = null;\n\n    if (props.autoPlay) {\n      interval = setInterval(play, props.autoPlay * 1000);\n    }\n\n    return () => {\n      if (props.autoPlay) {\n        clearInterval(interval);\n      }\n    };\n  }, [activeSlide]);\n  useEffect(() => {\n    if (transition === 0) setState({ ...state,\n      transition: 0.45,\n      transitioning: false\n    });\n  }, [transition]);\n\n  const throttleArrows = () => {\n    setState({ ...state,\n      transitioning: true\n    });\n  };\n\n  const handleResize = () => {\n    setState({ ...state,\n      translate: getWidth(),\n      transition: 0\n    });\n  };\n\n  const nextSlide = () => {\n    if (transitioning) return;\n    setState({ ...state,\n      translate: translate + getWidth(),\n      activeSlide: activeSlide === slides.length - 1 ? 0 : activeSlide + 1\n    });\n  };\n\n  const prevSlide = () => {\n    if (transitioning) return;\n    setState({ ...state,\n      translate: 0,\n      activeSlide: activeSlide === 0 ? slides.length - 1 : activeSlide - 1\n    });\n  };\n\n  const smoothTransition = () => {\n    let _slides = []; // We're at the last slide.\n\n    if (activeSlide === slides.length - 1) _slides = [slides[slides.length - 2], lastSlide, firstSlide]; // We're back at the first slide. Just reset to how it was on initial render\n    else if (activeSlide === 0) _slides = [lastSlide, firstSlide, secondSlide]; // Create an array of the previous last slide, and the next two slides that follow it.\n    else _slides = slides.slice(activeSlide - 1, activeSlide + 2);\n    setState({ ...state,\n      _slides,\n      transition: 0,\n      translate: getWidth()\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    css: SliderCSS,\n    ref: sliderRef,\n    children: [/*#__PURE__*/_jsxDEV(SliderContent, {\n      translate: translate,\n      transition: transition,\n      width: getWidth() * _slides.length,\n      children: _slides.map((_slide, i) => /*#__PURE__*/_jsxDEV(Slide, {\n        width: getWidth(),\n        content: _slide\n      }, _slide + i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Arrow, {\n      direction: \"left\",\n      handleClick: prevSlide\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Arrow, {\n      direction: \"right\",\n      handleClick: nextSlide\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dots, {\n      slides: slides,\n      activeSlide: activeSlide\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Slider, \"vFB2Uaxm/MEOgHzANL6aDNMmCbE=\");\n\n_c = Slider;\nconst SliderCSS = css`\n  position: relative;\n  height: 100vh;\n  width: 100vw;\n  margin: 0 auto;\n  overflow: hidden;\n  white-space: nowrap;\n`;\nexport default Slider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Slider\");","map":{"version":3,"sources":["/Users/kundie/Projects/project3/taot-website/src/components/slideshow/Slider.js"],"names":["React","useState","useEffect","useRef","useCallback","css","jsx","SliderContent","Slide","Arrow","Dots","getWidth","window","innerWidth","Slider","props","slides","firstSlide","secondSlide","lastSlide","length","state","setState","activeSlide","translate","transition","transitioning","_slides","autoPlayRef","transitionRef","resizeRef","sliderRef","throttleRef","current","nextSlide","smoothTransition","handleResize","throttleArrows","slider","smooth","e","target","className","includes","resize","throttle","transitionStart","addEventListener","transitionEnd","onResize","removeEventListener","play","interval","autoPlay","setInterval","clearInterval","prevSlide","slice","SliderCSS","map","_slide","i"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react'\nimport { css, jsx } from '@emotion/react'\nimport SliderContent from './SliderContent'\nimport Slide from './Slide'\nimport Arrow from './Arrow'\nimport Dots from './Dots'\n\nconst getWidth = () => window.innerWidth\n\n/**\n * @function Slider\n */\nconst Slider = props => {\n  const { slides } = props\n\n  const firstSlide = slides[0]\n  const secondSlide = slides[1]\n  const lastSlide = slides[slides.length - 1]\n\n  const [state, setState] = useState({\n    activeSlide: 0,\n    translate: getWidth(),\n    transition: 0.45,\n    transitioning: false,\n    _slides: [lastSlide, firstSlide, secondSlide]\n  })\n\n  const { activeSlide, translate, _slides, transition, transitioning } = state\n\n  const autoPlayRef = useRef()\n  const transitionRef = useRef()\n  const resizeRef = useRef()\n  const sliderRef = useRef()\n  const throttleRef = useRef()\n\n  useEffect(() => {\n    autoPlayRef.current = nextSlide\n    transitionRef.current = smoothTransition\n    resizeRef.current = handleResize\n    throttleRef.current = throttleArrows\n  })\n\n  useEffect(() => {\n    const slider = sliderRef.current\n\n    const smooth = e => {\n      if (e.target.className.includes('SliderContent')) {\n        transitionRef.current()\n      }\n    }\n\n    const resize = () => {\n      resizeRef.current()\n    }\n\n    const throttle = e => {\n      if (e.target.className.includes('SliderContent')) {\n        throttleRef.current()\n      }\n    }\n\n    const transitionStart = slider.addEventListener('transitionstart', throttle)\n    const transitionEnd = slider.addEventListener('transitionend', smooth)\n    const onResize = window.addEventListener('resize', resize)\n\n    return () => {\n      slider.removeEventListener('transitionend', transitionStart)\n      slider.removeEventListener('transitionend', transitionEnd)\n      window.removeEventListener('resize', onResize)\n    }\n  }, [])\n\n  useEffect(() => {\n    const play = () => {\n        autoPlayRef.current();\n    }\n\n    let interval = null\n\n    if (props.autoPlay) {\n        interval = setInterval(play, props.autoPlay * 1000);\n    }\n\n    return () => {\n        if (props.autoPlay) {\n            clearInterval(interval);\n        }\n    };\n  }, [activeSlide])\n\n  useEffect(() => {\n    if (transition === 0) setState({ ...state, transition: 0.45, transitioning: false })\n  }, [transition])\n\n  const throttleArrows = () => {\n    setState({...state, transitioning: true })\n  }\n\n  const handleResize = () => {\n    setState({ ...state, translate: getWidth(), transition: 0 })\n  }\n\n  const nextSlide = () => {\n    if(transitioning) return\n\n    setState({\n      ...state,\n      translate: translate + getWidth(),\n      activeSlide: activeSlide === slides.length - 1 ? 0 : activeSlide + 1\n    })\n  }\n\n  const prevSlide = () => {\n    if(transitioning) return\n\n    setState({\n      ...state,\n      translate: 0,\n      activeSlide: activeSlide === 0 ? slides.length - 1 : activeSlide - 1\n    })\n  }\n\n  const smoothTransition = () => {\n    let _slides = []\n\n    // We're at the last slide.\n    if (activeSlide === slides.length - 1)\n      _slides = [slides[slides.length - 2], lastSlide, firstSlide]\n    // We're back at the first slide. Just reset to how it was on initial render\n    else if (activeSlide === 0) _slides = [lastSlide, firstSlide, secondSlide]\n    // Create an array of the previous last slide, and the next two slides that follow it.\n    else _slides = slides.slice(activeSlide - 1, activeSlide + 2)\n\n    setState({\n      ...state,\n      _slides,\n      transition: 0,\n      translate: getWidth()\n    })\n  }\n\n  return (\n    <div css={SliderCSS} ref={sliderRef}>\n      <SliderContent\n        translate={translate}\n        transition={transition}\n        width={getWidth() * _slides.length}\n      >\n        {_slides.map((_slide, i) => (\n          <Slide width={getWidth()} key={_slide + i} content={_slide} />\n        ))}\n      </SliderContent>\n\n      <Arrow direction=\"left\" handleClick={prevSlide} />\n      <Arrow direction=\"right\" handleClick={nextSlide} />\n\n      <Dots slides={slides} activeSlide={activeSlide} />\n    </div>\n  )\n}\n\nconst SliderCSS = css`\n  position: relative;\n  height: 100vh;\n  width: 100vw;\n  margin: 0 auto;\n  overflow: hidden;\n  white-space: nowrap;\n`\n\nexport default Slider;\n"]},"metadata":{},"sourceType":"module"}